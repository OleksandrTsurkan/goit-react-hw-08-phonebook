{"version":3,"file":"static/js/132.1f4fc928.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Error/Error.styled.js","components/Error/Error.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/EmptyContactList/EmptyContactList.styled.js","components/EmptyContactList/EmptyContactList.jsx","pages/ContactsPage/ContactsPage.styled.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  width: 370px;\n  padding: 8px;\n  gap: 18px;\n  flex-wrap: wrap;\n  border: 2px solid black;\n`;\n\nexport const Input = styled.input`\n  height: 25px;\n  padding: 4px;\n  width: 280px;\n  margin-left: 8 px;\n  border-radius: 5px;\n  transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  &:hover {\n    border: 3px dotted #3a7999;\n    color: #3a7999;\n    background: rgba(0, 0, 0, 0);\n    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.3);\n  }\n`;\n\nexport const Labelcontact = styled.label`\n  width: 400px;\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n  padding: 4px 5px;\n`;\n\nexport const ButtonSend = styled.button`\n  border: 3px solid #3a7999;\n  border-radius: 20px;\n  background-color: #fffcfc;\n  cursor: pointer;\n\n  transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  &:hover {\n    border: 3px dotted #3a7999;\n    color: #3a7999;\n    background: rgba(0, 0, 0, 0);\n    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.3);\n  }\n`;\n\nexport const ContactDiv = styled.div`\n  width: 500px;\n  margin: 0px auto;\n  padding-top: 30px;\n`;\n\n\n","export const selectContactsList = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import { useEffect, useState } from 'react';\nimport {\n  ButtonSend,\n  ContactDiv,\n  Form,\n  Input,\n  Labelcontact,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { createContactsThunk } from 'redux/contacts/thunk';\nimport { toast } from 'react-toastify';\nimport { selectContactsList } from 'redux/contacts/contactsSelectors';\nimport { LoadAdd } from 'components/Loader/Loader';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [add, setAdd] = useState(false);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n  useEffect(() => {\n    setAdd(false);\n  }, [contacts]);\n\n  const handleChange = ({ target: { value, name } }) => {\n    if (name === 'name') setName(value);\n    else setNumber(value);\n  };\n\n  const onSubmitAddContact = event => {\n    event.preventDefault();\n    const data = { name, number };\n    const newObj = { ...data, id: nanoid() };\n\n    if (isNameNew(contacts, newObj) !== undefined) {\n      toast.warning(`${newObj.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(createContactsThunk(newObj))\n      .unwrap()\n      .then(originalPromiseResult => {\n        toast.success(\n          `${originalPromiseResult.name} successfully added to contacts`\n        );\n      })\n      .catch(() => {\n        toast.failure(\"Sorry, something's wrong\");\n      });\n    reset();\n  };\n\n  const isNameNew = (contacts, newObj) => {\n    return contacts.find(\n      ({ name }) => name.toLowerCase() === newObj.name.toLowerCase()\n    );\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <h2>Phonebook</h2>\n      <ContactDiv>\n        <Form onSubmit={onSubmitAddContact}>\n          <Labelcontact>\n            Name:\n            <Input\n              onChange={handleChange}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </Labelcontact>\n          <Labelcontact>\n            Number:\n            <Input\n              onChange={handleChange}\n              type=\"tel\"\n              value={number}\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </Labelcontact>\n          <ButtonSend type=\"submit\">\n            {add && <LoadAdd />} <p>Add contact</p>\n          </ButtonSend>\n        </Form>\n      </ContactDiv>\n      <h1>Contacts</h1>\n    </>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  width: 400px;\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n  padding: 4px 5px;\n`;\n\n\nexport const FilterInput = styled.input`\n  height: 25px;\n  padding: 4px;\n  width: 200px;\n  border-radius: 5px;\n  border: 1px solid blue;\n`;\n","import React from 'react';\nimport { filterSet, selectContactsFilter } from 'redux/filters/slice';\nimport { FilterInput, FilterLabel } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(selectContactsFilter);\n\n  const onChangeFilter = event => {\n    const { value } = event.currentTarget;\n    dispatch(filterSet(value));\n  };\n\n  return (\n    <div>\n      <FilterLabel>\n        Find contacts by name\n        <FilterInput\n          name=\"filter\"\n          type=\"text\"\n          value={filter}\n          onChange={onChangeFilter}\n        />\n      </FilterLabel>\n    </div>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const ErrorDiv = styled.div`\n  text-align: center;\n  margin-top: 30px;\n  padding: 10px;\n  width: 350px;\n  font-size: 24px;\n  background-color: tomato;\n`;\n","import { useSelector } from 'react-redux';\nimport { selectError } from 'redux/contacts/contactsSelectors';\nimport { ErrorDiv } from './Error.styled';\n\nexport const Error = () => {\n  const error = useSelector(selectError);\n\n  return <ErrorDiv>{error}</ErrorDiv>;\n};\n","import { styled } from 'styled-components';\n\n\nexport const Ullist = styled.ul`\n  padding: 0px;\n  border: 1px solid black;\n  width: 421px;\n`;\n\nexport const Lilist = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 400px;\n  padding: 10px;\n  border: 1px solid black;\n`;\n\nexport const ButtonDelete = styled.button`\n  border: 3px solid #3a7999;\n  border-radius: 20px;\n  background-color: #fffcfc;\n  cursor: pointer;\n\n  transition: all 300ms cubic-bezier(0.25, 0.46, 0.45, 0.94);\n  &:hover {\n    border: 3px dotted #3a7999;\n    color: red;\n    background: rgba(0, 0, 0, 0);\n    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.3);\n  }\n`;","import { useEffect, useState } from 'react';\nimport { ButtonDelete, Lilist, Ullist } from './ContactsList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactsThunk, getContactsThunk } from 'redux/contacts/thunk';\nimport { toast } from 'react-toastify';\nimport { selectContactsFilter } from 'redux/filters/slice';\nimport { selectContactsList } from 'redux/contacts/contactsSelectors';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { SpinerDel } from 'components/Loader/Loader';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const [load, setLoad] = useState(true);\n  useEffect(() => {\n    setLoad(false);\n  }, []);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectContactsList);\n  const filter = useSelector(selectContactsFilter);\n\n  const visibleContacts = contacts.filter(({ name }) =>\n    name?.toLowerCase().includes(filter)\n  );\n\n  const deleteContact = contactId => {\n    dispatch(deleteContactsThunk(contactId))\n      .unwrap()\n      .then(originalPromiseResult => {\n        toast.success(\n          `${originalPromiseResult.name} successfully deleted from contacts`\n        );\n      })\n      .catch(() => {\n        toast.failure(\"Sorry, something's wrong\");\n      });\n  };\n  return (\n    <Ullist>\n      {visibleContacts.map(({ id, name, number }) => {\n        return (\n          <Lilist key={id}>\n            <span>{name}</span>\n            <span>{number}</span>\n            <ButtonDelete\n              type=\"button\"\n              onClick={() => deleteContact(id)}\n              aria-label=\"delete\"\n            >\n              {load ? <SpinerDel /> : <DeleteIcon />}\n            </ButtonDelete>\n          </Lilist>\n        );\n      })}\n    </Ullist>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const Block = styled.div`\n  width: 100%;\n  height: 60px;\n  border-radius: 7px;\n  opacity: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { Block } from \"./EmptyContactList.styled\";\n\nexport const EmptyContactsList = () => {\n  return (\n    <Block >\n      <h1>You don't have any contacts</h1>\n    </Block>\n  );\n};\n","import { styled } from 'styled-components';\n\nexport const ContactsContainer = styled.form`\n  width: 500px;\n  margin: 0px auto;\n  padding: 20px;\n`;\n","import * as React from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { Error } from 'components/Error/Error';\nimport { useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { EmptyContactsList } from 'components/EmptyContactList/EmptyContactList';\nimport { ContactsContainer } from './ContactsPage.styled';\nimport {\n  selectContactsList,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/contactsSelectors';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const phoneBook = useSelector(selectContactsList);\n\n  return (\n    <ContactsContainer>\n      <ContactForm />\n      <Filter />\n      {error ? <Error /> : <ContactList />}\n      {phoneBook.length === 0 && !error && !isLoading && (\n        <EmptyContactsList />)}\n    </ContactsContainer>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["Form","styled","Input","Labelcontact","ButtonSend","ContactDiv","selectContactsList","state","contacts","items","selectIsLoading","isLoading","selectError","error","ContactForm","useState","name","setName","number","setNumber","add","setAdd","dispatch","useDispatch","useSelector","useEffect","handleChange","target","value","isNameNew","newObj","find","toLowerCase","reset","onSubmit","event","preventDefault","data","id","nanoid","undefined","createContactsThunk","unwrap","then","originalPromiseResult","toast","catch","onChange","type","pattern","title","required","FilterLabel","FilterInput","Filter","filter","selectContactsFilter","currentTarget","filterSet","ErrorDiv","Error","Ullist","Lilist","ButtonDelete","ContactList","load","setLoad","getContactsThunk","visibleContacts","includes","map","onClick","contactId","deleteContactsThunk","Delete","Block","EmptyContactsList","ContactsContainer","phoneBook","length"],"sourceRoot":""}